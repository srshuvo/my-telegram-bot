import re
import asyncio
import os
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiohttp import web

# -------------- Logging рж╕рзЗржЯржЖржк --------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# -------------- Environment Variable ржерзЗржХрзЗ BOT_TOKEN ржирзЗржУрзЯрж╛ --------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is not set!")

# -------------- Bot ржПржмржВ Dispatcher Initialization --------------
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# -------------- TERA BOX рж▓рж┐ржВржХ ржерзЗржХрзЗ ржЖржЗржбрж┐ ржмрзЗрж░ ржХрж░рж╛ --------------
def extract_id_from_terabox_link(link: str) -> str:
    match = re.search(r"https?://[^/]+/s/([^?&]+)", link)
    return match.group(1) if match else None

# -------------- ржирждрзБржи рж▓рж┐ржВржХ рждрзИрж░рж┐ ржХрж░рж╛ --------------
def generate_new_link_from_id(file_id: str) -> str:
    return f"https://mdiskplay.com/terabox/{file_id}"

# -------------- /start ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ --------------
@dp.message(Command("start"))
async def welcome_message(message: Message):
    first_name = message.from_user.first_name or "ржмржирзНржзрзБ"
    welcome_text = (
        f"тЬи рж╕рзНржмрж╛ржЧрждржо, {first_name}! ЁЯМЯ\n"
        "ржЖржорж╛ржжрзЗрж░ рж╕рзЗржмрж╛рзЯ ржЖржкржирж╛рж░ ржЖржЧржоржиржХрзЗ рж╕рзНржмрж╛ржЧржд ржЬрж╛ржирж╛ржЗ! ЁЯТл\n\n"
        "ЁЯФЧ ржпржжрж┐ ржЖржкржирж┐ **TERA BOX** рж▓рж┐ржЩрзНржХ ржкрж╛ржарж╛ржи, ржЖржорж░рж╛ рж╕рзЗржЯрж┐ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзЗ ржирждрзБржи рж▓рж┐ржВржХ ржкрзНрж░ржжрж╛ржи ржХрж░ржмред ЁЯОетЬи\n\n"
        "ЁЯдФ ржпрзЗржХрзЛржирзЛ ржкрзНрж░рж╢рзНржи ржмрж╛ рж╕рж╣рж╛рзЯрждрж╛рж░ ржЬржирзНржп ржЖржорж╛ржжрзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред ЁЯШК"
    )
    await message.reply(welcome_text)

# -------------- ржорзЗрж╕рзЗржЬ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: TERA BOX рж▓рж┐ржЩрзНржХ modify ржХрж░рж╛ --------------
@dp.message()
async def modify_link(message: Message):
    text = message.text or message.caption
    if not text:
        return

    urls = re.findall(r"https?://[^\s]+", text)  # рж╕ржм рж▓рж┐ржВржХ ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рж╛
    unique_links = {}  # ржбрзБржкрзНрж▓рж┐ржХрзЗржЯ рж░рзЛржз ржХрж░рждрзЗ

    for url in urls:
        if "tera" in url:  # рж╢рзБржзрзБржорж╛рждрзНрж░ TERA BOX рж▓рж┐ржВржХ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░ржмрзЗ
            file_id = extract_id_from_terabox_link(url)
            if file_id and file_id not in unique_links:
                unique_links[file_id] = generate_new_link_from_id(file_id)

    if not unique_links:
        return  # ржпржжрж┐ ржХрзЛржирзЛ TERA BOX рж▓рж┐ржВржХ ржирж╛ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ ржХрж┐ржЫрзБ ржХрж░ржмрзЗ ржирж╛

    # ржЯрж╛ржЗржкрж┐ржВ ржЗржлрзЗржХрзНржЯ ржжрзЗржЦрж╛ржирзЛрж░ ржЬржирзНржп
    await bot.send_chat_action(message.chat.id, action="typing")
    await asyncio.sleep(1.5)

    # ржмрж╛ржЯржи рждрзИрж░рж┐
    buttons = []
    for file_id, new_url in unique_links.items():
        buttons.append([
            InlineKeyboardButton(text="ЁЯОм ржнрж┐ржбрж┐ржУ ржжрзЗржЦрзБржи", url=new_url),
            InlineKeyboardButton(text="ЁЯФЧ рж╢рзЗрзЯрж╛рж░ ржХрж░рзБржи", switch_inline_query=new_url),
            InlineKeyboardButton(text="тЩ╗я╕П рж░рж┐ржЬрзЗржирж╛рж░рзЗржЯ", callback_data=f"regenerate_{file_id}")
        ])
    
    buttons.append([
        InlineKeyboardButton(text="тЭМ ржбрж┐рж▓рж┐ржЯ", callback_data="delete_message")
    ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    # ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛ
    sent_message = await message.reply("ЁЯФЧ ржЖржкржирж╛рж░ рж▓рж┐ржВржХ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ!", reply_markup=keyboard)

# -------------- рж░рж┐ржЬрзЗржирж╛рж░рзЗржЯ ржмрж╛ржЯржи рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ --------------
@dp.callback_query(lambda c: c.data.startswith("regenerate_"))
async def regenerate_link(callback: CallbackQuery):
    file_id = callback.data.replace("regenerate_", "")
    new_id = file_id[1:]  # ржкрзНрж░ржержо ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ ржмрж╛ржж ржжрж┐рзЯрзЗ ржирждрзБржи ржЖржЗржбрж┐ рждрзИрж░рж┐
    new_url = generate_new_link_from_id(new_id)

    buttons = [
        [InlineKeyboardButton(text="ЁЯОм ржирждрзБржи ржнрж┐ржбрж┐ржУ ржжрзЗржЦрзБржи", url=new_url)],
        [InlineKeyboardButton(text="ЁЯФЧ рж╢рзЗрзЯрж╛рж░ ржХрж░рзБржи", switch_inline_query=new_url)],
        [InlineKeyboardButton(text="тЩ╗я╕П ржЖржмрж╛рж░ рж░рж┐ржЬрзЗржирж╛рж░рзЗржЯ", callback_data=f"regenerate_{new_id}")],
        [InlineKeyboardButton(text="тЭМ ржбрж┐рж▓рж┐ржЯ", callback_data="delete_message")]
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer("тЬЕ ржирждрзБржи рж▓рж┐ржВржХ рждрзИрж░рж┐ рж╣рзЯрзЗржЫрзЗ!")

# -------------- Delete Button Handler --------------
@dp.callback_query(lambda c: c.data == "delete_message")
async def delete_message(callback: CallbackQuery):
    try:
        await bot.delete_message(callback.message.chat.id, callback.message.message_id)
        await callback.answer("тЬЕ ржорзЗрж╕рзЗржЬ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣рзЯрзЗржЫрзЗ!", show_alert=True)
    except Exception as e:
        logger.error(f"Error deleting message: {e}")
        await callback.answer("тЭМ ржорзЗрж╕рзЗржЬ ржбрж┐рж▓рж┐ржЯ ржХрж░рждрзЗ ржмрзНржпрж░рзНрже!", show_alert=True)

# -------------- Keep-Alive ржУрзЯрзЗржм рж╕рж╛рж░рзНржнрж╛рж░ (aiohttp) --------------
async def handle(request):
    return web.Response(text="I'm alive!")

async def start_webserver():
    app = web.Application()
    app.router.add_get('/', handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()
    logger.info("тЬЕ Webserver is running on port 8080")

# -------------- Main ржлрж╛ржВрж╢ржи: ржУржпрж╝рзЗржм рж╕рж╛рж░рзНржнрж╛рж░ ржУ ржмржЯрзЗрж░ ржкрзЛрж▓рж┐ржВ рж╢рзБрж░рзБ ржХрж░рж╛ --------------
async def main():
    asyncio.create_task(start_webserver())
    logger.info("тЬЕ Bot is starting polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
