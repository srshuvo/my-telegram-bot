import os
import re
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from dotenv import load_dotenv

# Environment variables ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# Bot & Dispatcher ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# ID ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶ì ‡¶®‡¶§‡ßÅ‡¶® ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def extract_id_and_generate_link(url):
    match = re.search(r"tera(\w+)", url)
    if match:
        extracted_id = match.group(1)
        new_link = f"https://mdiskplay.com/terabox/{extracted_id}"
        return extracted_id, new_link
    return None, None

# ‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡ßã‡¶§‡¶æ‡¶Æ ‡¶§‡ßà‡¶∞‡¶ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def create_inline_buttons(link):
    buttons = InlineKeyboardMarkup(row_width=2)
    buttons.add(
        InlineKeyboardButton("üé¨ Watch Video", url=link),
        InlineKeyboardButton("üîó Share", switch_inline_query=link)
    )
    buttons.add(
        InlineKeyboardButton("üóëÔ∏è Delete", callback_data="delete"),
        InlineKeyboardButton("üîÑ Regenerate", callback_data=f"regenerate:{link.split('/')[-1]}")
    )
    return buttons

# ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ (‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶ö‡ßá‡¶ï ‡¶ì ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã)
@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def link_handler(message: types.Message):
    url = message.text.strip()
    extracted_id, new_link = extract_id_and_generate_link(url)

    if extracted_id:
        buttons = create_inline_buttons(new_link)
        await message.reply(f"‚úÖ **Here's your link:**\nüîó {new_link}", reply_markup=buttons, parse_mode="Markdown")
    else:
        await message.reply("‚ùå No valid 'tera' link found!")

# ‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡ßã‡¶§‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
@dp.callback_query_handler(lambda c: c.data.startswith("regenerate") or c.data == "delete")
async def callback_handler(call: types.CallbackQuery):
    if call.data == "delete":
        await call.message.delete()
    elif call.data.startswith("regenerate"):
        old_id = call.data.split(":")[1]
        new_id = old_id[1:]  # ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡ßü‡ßá ‡¶®‡¶§‡ßÅ‡¶® ID ‡¶§‡ßà‡¶∞‡¶ø
        new_link = f"https://mdiskplay.com/terabox/{new_id}"
        buttons = create_inline_buttons(new_link)

        await call.message.edit_text(f"‚ôªÔ∏è **Regenerated Link:**\nüîó {new_link}", reply_markup=buttons, parse_mode="Markdown")

# ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
