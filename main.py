import os
import re
import asyncio
import threading
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from flask import Flask

# тЬЕ Environment variables рж▓рзЛржб ржХрж░рж╛
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# тЬЕ Bot & Dispatcher рж╕рзЗржЯржЖржк (aiogram v3.7+ ржЕржирзБржпрж╛рзЯрзА)
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher()

# тЬЕ Flask Web Server рждрзИрж░рж┐
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is running!"

def run_flask():
    app.run(host="0.0.0.0", port=8080)

# тЬЕ рж╢рзБржзрзБржорж╛рждрзНрж░ 'tera' ржерж╛ржХрж╛ рж▓рж┐ржВржХ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░ржмрзЗ
def extract_ids_and_generate_links(text):
    matches = re.findall(r"https?://\S+", text)  # рж╕ржорж╕рзНржд рж▓рж┐ржВржХ ржмрзЗрж░ ржХрж░рж╛
    unique_links = {link for link in matches if "tera" in link}  # рж╢рзБржзрзБ 'tera' ржерж╛ржХрж╛ рж▓рж┐ржВржХ ржирзЗржмрзЗ
    link_map = {link: f"https://mdiskplay.com/terabox/{link.split('/')[-1]}" for link in unique_links}  # ржирждрзБржи рж▓рж┐ржВржХ рждрзИрж░рж┐
    return link_map

# тЬЕ ржЗржирж▓рж╛ржЗржи ржмрзЛрждрж╛ржо рждрзИрж░рж┐ ржлрж╛ржВрж╢ржи
def create_inline_buttons(link_map):
    buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"ЁЯОм Watch Video {i+1}", url=new_link)] +
        [InlineKeyboardButton(text="ЁЯФЧ Share", switch_inline_query=new_link)] +
        [InlineKeyboardButton(text="ЁЯЧСя╕П Delete", callback_data=f"delete:{new_link.split('/')[-1]}")] +
        [InlineKeyboardButton(text="ЁЯФД Regenerate", callback_data=f"regenerate:{old_link}")]
        for i, (old_link, new_link) in enumerate(link_map.items())
    ])
    return buttons

# тЬЕ Start command
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer("ЁЯСЛ Welcome! Send me a 'tera' link or a media with a 'tera' link, and I'll generate a new link for you.")

# тЬЕ ржорзЗрж╕рзЗржЬ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ (ржЯрзЗржХрзНрж╕ржЯ ржмрж╛ ржорж┐ржбрж┐рзЯрж╛ ржХрзНржпрж╛ржкрж╢ржи ржЪрзЗржХ)
@dp.message()
async def link_handler(message: types.Message):
    text = message.text if message.text else message.caption  # ржЯрзЗржХрзНрж╕ржЯ ржмрж╛ ржХрзНржпрж╛ржкрж╢ржи ржЪрзЗржХ
    if not text:
        return  # ржпржжрж┐ ржЯрзЗржХрзНрж╕ржЯ ржмрж╛ ржХрзНржпрж╛ржкрж╢ржи ржирж╛ ржерж╛ржХрзЗ, ржХрж┐ржЫрзБ ржХрж░ржмрзЗ ржирж╛

    link_map = extract_ids_and_generate_links(text)

    if link_map:
        buttons = create_inline_buttons(link_map)
        modified_links = "\n".join([f"ЁЯФЧ {new_link}" for new_link in link_map.values()])
        await message.answer(f"тЬЕ **Modified Links:**\n{modified_links}", reply_markup=buttons)
    else:
        await message.answer("тЭМ No valid 'tera' link found!")

# тЬЕ ржЗржирж▓рж╛ржЗржи ржмрзЛрждрж╛ржорзЗрж░ ржХрж▓ржмрзНржпрж╛ржХ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ (Regenerate ржарж┐ржХ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ)
@dp.callback_query()
async def callback_handler(call: CallbackQuery):
    if call.data.startswith("delete"):
        await call.message.delete()

    elif call.data.startswith("regenerate"):
        old_link = call.data.split(":")[1]  # ржкрзБрж░рж╛рждржи рж▓рж┐ржВржХ
        old_id = old_link.split("/")[-1]  # ржкрзБрж░рж╛рждржи ID

        # ржпржжрж┐ ID ржПржХ ржЕржХрзНрж╖рж░рзЗрж░ рж╣рзЯ, рждрж╛рж╣рж▓рзЗ ржкрж░рж┐ржмрж░рзНрждржи ржирж╛ ржХрж░рзЗ ржЖржЧрзЗрж░ржЯрж╛ржЗ ржерж╛ржХржмрзЗ
        if len(old_id) > 1:
            new_id = old_id[1:]  # ржкрзНрж░ржержо ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ ржмрж╛ржж ржжрж┐рзЯрзЗ ржирждрзБржи ID рждрзИрж░рж┐
        else:
            new_id = old_id  # ID ржЫрзЛржЯ рж╣рж▓рзЗ ржкрж░рж┐ржмрж░рзНрждржи рж╣ржмрзЗ ржирж╛

        new_link = f"https://mdiskplay.com/terabox/{new_id}"  # ржирждрзБржи рж▓рж┐ржВржХ
        
        # ржЖржЧрзЗрж░ ржорзЗрж╕рзЗржЬ ржерзЗржХрзЗ рж╕ржорж╕рзНржд рж▓рж┐ржВржХ ржмрзЗрж░ ржХрж░рж╛
        original_text = call.message.text
        existing_links = re.findall(r"https://mdiskplay.com/terabox/\S+", original_text)

        # ржкрзБрж░рж╛рждржи рж▓рж┐ржВржХ ржЖржкржбрзЗржЯ ржХрж░рзЗ ржирждрзБржи рж▓рж┐ржВржХ ржмрж╕рж╛ржирзЛ
        updated_links = [new_link if link == old_link else link for link in existing_links]
        updated_text = "тЬЕ **Modified Links:**\n" + "\n".join([f"ЁЯФЧ {link}" for link in updated_links])

        # ржирждрзБржи ржмрзЛрждрж╛ржо рж╕рзЗржЯржЖржк
        new_link_map = {link: link for link in updated_links}
        buttons = create_inline_buttons(new_link_map)

        await call.message.edit_text(updated_text, reply_markup=buttons)

# тЬЕ ржорзЗржЗржи ржлрж╛ржВрж╢ржи (aiogram v3 ржЕржирзБржпрж╛рзЯрзА async loop рж╕рзЗржЯржЖржк)
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    threading.Thread(target=run_flask).start()  # Flask Server ржЪрж╛рж▓рзБ ржХрж░рж╛
    asyncio.run(main())  # Telegram Bot ржЪрж╛рж▓рзБ ржХрж░рж╛
