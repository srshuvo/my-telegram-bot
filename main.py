import re
import asyncio
import os
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiohttp import web

# -------------- Logging ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ --------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# -------------- Environment Variable ‡¶•‡ßá‡¶ï‡ßá BOT_TOKEN ‡¶®‡ßá‡¶ì‡ßü‡¶æ --------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is not set!")

# -------------- Bot ‡¶è‡¶¨‡¶Ç Dispatcher Initialization --------------
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# -------------- TERA BOX ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ --------------
def extract_id_from_terabox_link(url: str) -> str:
    match = re.search(r"/s/([a-zA-Z0-9_]+)", url)
    return match.group(1) if match else None

# -------------- ‡¶®‡¶§‡ßÅ‡¶® ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ --------------
def generate_new_link_from_id(id: str) -> str:
    return f"https://mdiskplay.com/terabox/{id}"

# -------------- /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ --------------
@dp.message(F.text == "/start")
async def welcome_message(message: Message):
    first_name = message.from_user.first_name or "‡¶¨‡¶®‡ßç‡¶ß‡ßÅ"
    welcome_text = (
        f"‚ú® ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ, {first_name}! üåü\n"
        "‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡ßá‡¶¨‡¶æ‡ßü ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶ó‡¶Æ‡¶®‡¶ï‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§ ‡¶ú‡¶æ‡¶®‡¶æ‡¶á! üí´\n\n"
        "üîó ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶™‡¶®‡¶ø **TERA BOX** ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶®, ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∏‡ßá‡¶ü‡¶ø ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶‡¶≠‡¶æ‡¶¨‡ßá **PLAY** ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡¶¨‡•§ üé•‚ú®\n\n"
        "ü§î ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶¨‡¶æ ‡¶∏‡¶π‡¶æ‡ßü‡¶§‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§\n\n"
        f"‚ú® Welcome, {first_name}! üåü\n"
        "We're thrilled to have you here! üí´\n\n"
        "üîó If you send a **TERA BOX** link, we'll safely **PLAY** it for you. üé•‚ú®\n\n"
        "ü§î If you have any questions or need assistance, feel free to ask! üòä"
    )
    try:
        await message.reply(welcome_text)
    except Exception as e:
        logger.error(f"Error sending welcome message: {e}")

# -------------- Regenerate ‡¶Ö‡¶™‡¶∂‡¶® --------------
@dp.message()
async def regenerate_link(message: Message):
    text = message.text or message.caption
    if not text:
        return

    # TERA BOX ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
    extracted_id = None
    for word in text.split():
        if "tera" in word.lower():
            extracted_id = extract_id_from_terabox_link(word)
            if extracted_id:
                break

    if not extracted_id:
        return

    # ‡¶®‡¶§‡ßÅ‡¶® ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
    new_link = generate_new_link_from_id(extracted_id)

    # ‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶ü‡¶® ‡¶∏‡¶π ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
    buttons = [
        [
            InlineKeyboardButton(
                text="üé¨ Watch Video",  # ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶¶‡ßá‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶æ‡¶ü‡¶®
                url=new_link
            ),
            InlineKeyboardButton(
                text="üîó Share this Link Now!",  # ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶∂‡ßá‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®
                switch_inline_query=new_link
            ),
        ],
        [
            InlineKeyboardButton(
                text="‚ôªÔ∏è Regenerate",  # ‡¶∞‡¶ø‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶¨‡¶æ‡¶ü‡¶®
                callback_data="regenerate_link"
            ),
            InlineKeyboardButton(
                text="‚ùå Delete",  # ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®
                callback_data="delete_message"
            )
        ]
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.reply(text, reply_markup=keyboard)

# -------------- Delete Button Handler --------------
@dp.callback_query(F.data == "delete_message")
async def delete_message(callback: CallbackQuery):
    try:
        await bot.delete_message(callback.message.chat.id, callback.message.message_id)
        await callback.answer("‚úÖ Message deleted successfully!", show_alert=True)
    except Exception as e:
        logger.error(f"Error deleting message: {e}")
        await callback.answer("‚ùå Failed to delete message!", show_alert=True)

# -------------- Regenerate Link Button Handler --------------
@dp.callback_query(F.data == "regenerate_link")
async def regenerate_link_callback(callback: CallbackQuery):
    original_message = callback.message
    original_text = original_message.text

    # TERA BOX ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
    extracted_id = None
    for word in original_text.split():
        if "tera" in word.lower():
            extracted_id = extract_id_from_terabox_link(word)
            if extracted_id:
                break

    if not extracted_id:
        await callback.answer("‚ùå Invalid link!", show_alert=True)
        return

    # ‡¶®‡¶§‡ßÅ‡¶® ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
    new_link = generate_new_link_from_id(extracted_id)

    # ‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶ü‡¶® ‡¶∏‡¶π ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
    buttons = [
        [
            InlineKeyboardButton(
                text="üé¨ Watch Video",  # ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶¶‡ßá‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶æ‡¶ü‡¶®
                url=new_link
            ),
            InlineKeyboardButton(
                text="üîó Share this Link Now!",  # ‡¶∂‡ßá‡ßü‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®
                switch_inline_query=new_link
            ),
        ],
        [
            InlineKeyboardButton(
                text="‚ôªÔ∏è Regenerate",  # ‡¶∞‡¶ø‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶¨‡¶æ‡¶ü‡¶®
                callback_data="regenerate_link"
            ),
            InlineKeyboardButton(
                text="‚ùå Delete",  # ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶¨‡¶æ‡¶ü‡¶®
                callback_data="delete_message"
            )
        ]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    # ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
    await callback.message.edit_text(original_text, reply_markup=keyboard)
    await callback.answer("‚ôªÔ∏è Link regenerated!", show_alert=True)

# -------------- Keep-Alive ‡¶ì‡ßü‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ (aiohttp) --------------
async def handle(request):
    return web.Response(text="I'm alive!")

async def start_webserver():
    app = web.Application()
    app.router.add_get('/', handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()
    logger.info("‚úÖ Webserver is running on port 8080")

# -------------- Main ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®: ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶ì ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶™‡ßã‡¶≤‡¶ø‡¶Ç ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ --------------
async def main():
    asyncio.create_task(start_webserver())
    logger.info("‚úÖ Bot is starting polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
