import re
import asyncio
import os
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiohttp import web

# -------------- Logging ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ --------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# -------------- Environment Variable ‡¶•‡ßá‡¶ï‡ßá BOT_TOKEN ‡¶®‡ßá‡¶ì‡ßü‡¶æ --------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is not set!")

# -------------- Bot ‡¶è‡¶¨‡¶Ç Dispatcher Initialization --------------
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# -------------- URL Extract ‡¶ì Modify ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® --------------
def extract_modified_urls(text: str) -> list:
    urls = re.findall(r"https?://[^\s]+", text)
    unique_urls = set()
    modified_urls = []
    for url in urls:
        if "tera" in url and not url.startswith("https://player.terabox.tech/?url="):
            modified_url = f"https://player.terabox.tech/?url={url}"
            if modified_url not in unique_urls:
                unique_urls.add(modified_url)
                modified_urls.append(modified_url)
    return modified_urls

# -------------- /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ --------------
@dp.message(F.text == "/start")
async def welcome_message(message: Message):
    first_name = message.from_user.first_name or "‡¶¨‡¶®‡ßç‡¶ß‡ßÅ"
    welcome_text = (
        f"‚ú® ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ, {first_name}! üåü\n"
        "üîó ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ø‡¶¶‡¶ø **TERA BOX** ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶®, ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∏‡ßá‡¶ü‡¶ø **PLAY** ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡¶¨‡•§ üé•‚ú®\n"
    )
    try:
        await message.reply(welcome_text)
    except Exception as e:
        logger.error(f"Error sending welcome message: {e}")

# -------------- ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞: TERA BOX ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï modify ‡¶ï‡¶∞‡¶æ --------------
@dp.message()
async def modify_link(message: Message):
    text = message.text or message.caption
    if not text:
        return

    modified_urls = extract_modified_urls(text)
    if not modified_urls:
        return

    # ‡¶ü‡¶æ‡¶á‡¶™‡¶ø‡¶Ç ‡¶á‡¶´‡ßá‡¶ï‡ßç‡¶ü ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
    await bot.send_chat_action(message.chat.id, action="typing")
    await asyncio.sleep(1.5)

    # ‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶ï‡ßÄ‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶§‡ßà‡¶∞‡¶ø
    buttons = [
        [InlineKeyboardButton(text=f"üé¨ Watch Video {i+1}", url=url)]
        for i, url in enumerate(modified_urls)
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    # ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
    await message.reply("‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶∞‡ßá‡¶°‡¶ø:", reply_markup=keyboard)

# -------------- Keep-Alive ‡¶ì‡ßü‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ (aiohttp) --------------
async def handle(request):
    return web.Response(text="I'm alive!")

async def start_webserver():
    app = web.Application()
    app.router.add_get('/', handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()
    logger.info("‚úÖ Webserver is running on port 8080")

# -------------- Main ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® --------------
async def main():
    asyncio.create_task(start_webserver())
    logger.info("‚úÖ Bot is starting polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
