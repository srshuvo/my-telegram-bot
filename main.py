import os
import asyncio
import json
import requests
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from fastapi import FastAPI
from flask import Flask

# .env ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá Environment Variables ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# Flask & FastAPI Instance (Render.com-‡¶è ‡¶π‡ßã‡¶∏‡ßç‡¶ü‡¶ø‡¶Ç‡ßü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
flask_app = Flask(__name__)
fastapi_app = FastAPI()

# Aiogram Bot Setup
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# Terabox ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶ü‡¶æ ‡¶´‡ßá‡¶ö ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def fetch_video_data(url):
    try:
        id = url.split("/")[-1]  # URL ‡¶•‡ßá‡¶ï‡ßá ID ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
        api_url = f"https://wholly-api.skinnyrunner.com/get/website-data.php?get_html=https://www.terabox.tech/api/yttera?id={id}"
        response = requests.get(api_url)
        data = json.loads(response.text)

        if "response" not in data:
            return None

        video_data = data["response"][0]
        return {
            "title": video_data["title"],
            "thumbnail": video_data["thumbnail"],
            "fast_download": video_data["resolutions"]["Fast Download"],
            "hd_download": video_data["resolutions"]["HD Video"],
            "video_url": f"https://apis.forn.fun/tera/data.php?id={id}"
        }
    except:
        return None

# Start Command
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("üëã Welcome to Terabox Player Bot!\nSend me a Terabox URL to fetch the video.")

# URL ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
@dp.message()
async def handle_url(message: types.Message):
    url = message.text.strip()
    
    if "terabox" not in url:
        await message.answer("‚ùå Invalid Terabox URL! Please send a valid link.")
        return

    video_data = fetch_video_data(url)

    if not video_data:
        await message.answer("‚ö†Ô∏è Failed to fetch video data. Please try again later.")
        return

    # ‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡ßã‡¶§‡¶æ‡¶Æ ‡¶§‡ßà‡¶∞‡¶ø
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì• Fast Download", url=video_data["fast_download"])],
        [InlineKeyboardButton(text="üîº HD Download", url=video_data["hd_download"])]
    ])

    # ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì Thumbnail ‡¶∏‡¶π ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
    await message.answer_photo(
        photo=video_data["thumbnail"],
        caption=f"üé¨ *{video_data['title']}*\n\nüîó [Watch Video]({video_data['video_url']})",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

# FastAPI Route for Render.com (Status Check)
@fastapi_app.get("/")
def read_root():
    return {"status": "Bot is Running"}

# Flask Route for Render.com (Alternative)
@flask_app.route("/")
def home():
    return "Bot is Running Successfully!"

# ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
async def main():
    print("ü§ñ Bot is running...")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

# ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü ‡¶∞‡¶æ‡¶® ‡¶π‡¶≤‡ßá asyncio ‡¶¶‡¶ø‡ßü‡ßá ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(main())

    # Flask ‡¶è‡¶¨‡¶Ç FastAPI ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã
    import threading
    threading.Thread(target=lambda: flask_app.run(host="0.0.0.0", port=8000)).start()
    import uvicorn
    uvicorn.run(fastapi_app, host="0.0.0.0", port=8080)
