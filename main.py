import re
import asyncio
import os
import logging

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiohttp import web

# -------------- Logging рж╕рзЗржЯржЖржк --------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# -------------- Environment Variable ржерзЗржХрзЗ BOT_TOKEN ржирзЗржУрзЯрж╛ --------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is not set!")

# -------------- Bot ржПржмржВ Dispatcher Initialization --------------
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# -------------- URL Extract ржУ Modify ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи --------------
def extract_modified_urls(text: str) -> list:
    urls = re.findall(r"https?://[^\s]+", text)
    unique_urls = set()
    modified_urls = []
    for url in urls:
        if "tera" in url and not url.startswith("https://player.terabox.tech/?url="):
            modified_url = f"https://player.terabox.tech/?url={url}"
            if modified_url not in unique_urls:
                unique_urls.add(modified_url)
                modified_urls.append(modified_url)
    return modified_urls

# -------------- /start ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ --------------
@dp.message(F.text == "/start")
async def welcome_message(message: Message):
    first_name = message.from_user.first_name or "ржмржирзНржзрзБ"
    welcome_text = (
        f"тЬи рж╕рзНржмрж╛ржЧрждржо, {first_name}! ЁЯМЯ\n"
        "ржЖржорж╛ржжрзЗрж░ рж╕рзЗржмрж╛рзЯ ржЖржкржирж╛рж░ ржЖржЧржоржиржХрзЗ рж╕рзНржмрж╛ржЧржд ржЬрж╛ржирж╛ржЗ! ЁЯТл\n\n"
        "ЁЯФЧ ржпржжрж┐ ржЖржкржирж┐ **TERA BOX** рж▓рж┐ржЩрзНржХ ржкрж╛ржарж╛ржи, ржЖржорж░рж╛ рж╕рзЗржЯрж┐ ржирж┐рж░рж╛ржкржжржнрж╛ржмрзЗ **PLAY** ржХрж░рзЗ ржжрж┐ржмред ЁЯОетЬи\n\n"
        "ЁЯдФ ржпрзЗржХрзЛржирзЛ ржкрзНрж░рж╢рзНржи ржмрж╛ рж╕рж╣рж╛рзЯрждрж╛рж░ ржЬржирзНржп ржЖржорж╛ржжрзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред\n\n"
        f"тЬи Welcome, {first_name}! ЁЯМЯ\n"
        "We're thrilled to have you here! ЁЯТл\n\n"
        "ЁЯФЧ If you send a **TERA BOX** link, we'll safely **PLAY** it for you. ЁЯОетЬи\n\n"
        "ЁЯдФ If you have any questions or need assistance, feel free to ask! ЁЯШК"
    )
    try:
        await message.reply(welcome_text)
        # ржкрж┐ржи ржХрж░рж╛ ржмрж╛рж░рзНрждрж╛ рж╢рзБржзрзБржорж╛рждрзНрж░ /start ржХржорж╛ржирзНржбрзЗ ржкрж┐ржи рж╣ржмрзЗ
        await pin_server_issue_message(message.chat.id)
    except Exception as e:
        logger.error(f"Error sending welcome message: {e}")

# -------------- ржкрж┐ржи ржХрж░рж╛ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржорзЗрж╕рзЗржЬ --------------
async def pin_server_issue_message(chat_id: int):
    message_text = (
        "тЪая╕П **рж╕рж╛рж░рзНржнрж╛рж░ рж╕ржорж╕рзНржпрж╛рж░ ржХрж╛рж░ржгрзЗ ржмржЯ ржПрж░ рж▓рж┐ржЩрзНржХ ржкрж╛ржарж╛рждрзЗ ржжрзЗрж░рж┐ рж╣рждрзЗ ржкрж╛рж░рзЗ** тЪая╕П\n"
        "ЁЯУМ **рж▓рж┐ржЩрзНржХ ржкрж╛ржарж╛рждрзЗ ржерж╛ржХрзБржи, рж╕рж╛рж░рзНржнрж╛рж░ ржарж┐ржХ рж╣рж▓рзЗ рж╕ржм ржнрж┐ржбрж┐ржУ ржкрж╛ржарж╛ржирзЛ рж╣ржмрзЗред**\n\n"
        "тЪая╕П **Due to server issues, the bot may take time to send links.** тЪая╕П\n"
        "ЁЯУМ **Keep sending links, and once the server is fixed, all videos will be sent.**"
    )

    try:
        sent_message = await bot.send_message(chat_id, message_text, parse_mode="Markdown")
        await sent_message.pin()  # рж╢рзБржзрзБржорж╛рждрзНрж░ /start ржХржорж╛ржирзНржбрзЗ ржкрж┐ржи рж╣ржмрзЗ
    except Exception as e:
        logger.error(f"Error pinning message: {e}")

# -------------- ржорзЗрж╕рзЗржЬ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: TERA BOX рж▓рж┐ржЩрзНржХ modify ржХрж░рж╛ --------------
@dp.message()
async def modify_link(message: Message):
    text = message.text or message.caption
    if not text:
        return

    modified_urls = extract_modified_urls(text)
    if not modified_urls:
        return

    # ржЯрж╛ржЗржкрж┐ржВ ржЗржлрзЗржХрзНржЯ ржжрзЗржЦрж╛ржирзЛрж░ ржЬржирзНржп
    await bot.send_chat_action(message.chat.id, action="typing")
    await asyncio.sleep(1.5)

    # ржорзВрж▓ рж▓рж┐ржЩрзНржХржЧрзБрж▓рж┐ ржорзБржЫрзЗ ржлрзЗрж▓рж╛
    for url in modified_urls:
        text = text.replace(url, "")

    # ржкрзНрж░рждрж┐ржЯрж┐ modified URL ржПрж░ ржЬржирзНржп ржЗржирж▓рж╛ржЗржи ржмрж╛ржЯржи рждрзИрж░рж┐
    buttons = []
    for i, url in enumerate(modified_urls):
        buttons.append([
            InlineKeyboardButton(
                text=f"ЁЯОм Watch Video {i+1} - Click to Watch!",  # ржХрж╛рж╕рзНржЯржо ржмрж╛ржЯржи ржЯрзЗржХрзНрж╕ржЯ (ржЖрж░ржУ ржЖржХрж░рзНрж╖ржгрзАрзЯ)
                url=url,
            ),
            InlineKeyboardButton(
                text="ЁЯФЧ Share this Link Now!",  # рж╢рзЗрзЯрж╛рж░ рж▓рж┐ржЩрзНржХ ржмрж╛ржЯржи ржЯрзЗржХрзНрж╕ржЯ (ржЖрж░ржУ рж╕рзНржкрж╖рзНржЯ)
                switch_inline_query=url
            )
        ])
    buttons.append([
        InlineKeyboardButton(
            text="ЁЯЧСя╕П Delete This Message",  # ржХрж╛рж╕рзНржЯржо ржбрж┐рж▓рж┐ржЯ ржмрж╛ржЯржи ржЯрзЗржХрзНрж╕ржЯ
            callback_data="delete_message"
        )
    ])

    # ржХрж╛рж╕рзНржЯржо рж╕рзНржЯрж╛ржЗрж▓рж┐ржВ рж╕рж╣ ржЗржирж▓рж╛ржЗржи ржХрзАржмрзЛрж░рзНржб рждрзИрж░рж┐
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    # рж╢рзБржзрзБржорж╛рждрзНрж░ ржмрж╛ржЯржи рж╕рж╣ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛ
    sent_message = None
    if message.text:
        sent_message = await message.reply(text, reply_markup=keyboard)
    elif message.photo:
        sent_message = await message.reply_photo(photo=message.photo[-1].file_id, caption=text, reply_markup=keyboard)
    elif message.video:
        sent_message = await message.reply_video(video=message.video.file_id, caption=text, reply_markup=keyboard)
    elif message.document:
        sent_message = await message.reply_document(document=message.document.file_id, caption=text, reply_markup=keyboard)
    elif message.audio:
        sent_message = await message.reply_audio(audio=message.audio.file_id, caption=text, reply_markup=keyboard)
    elif message.voice:
        sent_message = await message.reply_voice(voice=message.voice.file_id, caption=text, reply_markup=keyboard)

# -------------- Delete Button Handler --------------
@dp.callback_query(F.data == "delete_message")
async def delete_message(callback: CallbackQuery):
    try:
        await bot.delete_message(callback.message.chat.id, callback.message.message_id)
        await callback.answer("тЬЕ Message deleted successfully!", show_alert=True)
    except Exception as e:
        logger.error(f"Error deleting message: {e}")
        await callback.answer("тЭМ Failed to delete message!", show_alert=True)

# -------------- Keep-Alive ржУрзЯрзЗржм рж╕рж╛рж░рзНржнрж╛рж░ (aiohttp) --------------
async def handle(request):
    return web.Response(text="I'm alive!")

async def start_webserver():
    app = web.Application()
    app.router.add_get('/', handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()
    logger.info("тЬЕ Webserver is running on port 8080")

# -------------- Main ржлрж╛ржВрж╢ржи: ржУржпрж╝рзЗржм рж╕рж╛рж░рзНржнрж╛рж░ ржУ ржмржЯрзЗрж░ ржкрзЛрж▓рж┐ржВ рж╢рзБрж░рзБ ржХрж░рж╛ --------------
async def main():
    asyncio.create_task(start_webserver())
    logger.info("тЬЕ Bot is starting polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())














