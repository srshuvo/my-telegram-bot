import re
import asyncio
import os
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiohttp import web

# -------------- Logging ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ --------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# -------------- Environment Variable ‡¶•‡ßá‡¶ï‡ßá BOT_TOKEN ‡¶®‡ßá‡¶ì‡ßü‡¶æ --------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is not set!")

# -------------- Bot ‡¶è‡¶¨‡¶Ç Dispatcher Initialization --------------
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# -------------- TERA BOX ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ --------------
def extract_id_from_terabox_link(link: str) -> str:
    match = re.search(r"https?://[^/]+/s/([^?&]+)", link)
    return match.group(1) if match else None

# -------------- ‡¶®‡¶§‡ßÅ‡¶® ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ --------------
def generate_new_link_from_id(file_id: str) -> str:
    return f"https://mdiskplay.com/terabox/{file_id}"

# -------------- M3U8 ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ --------------
def generate_m3u8_link_from_id(file_id: str) -> str:
    return f"https://video.mdiskplay.com/{file_id}.m3u8"

# -------------- ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶•‡ßá‡¶ï‡ßá Inline Keyboard ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ --------------
def create_keyboard(links):
    buttons = []
    for file_id, new_url in links.items():
        buttons.append([
            InlineKeyboardButton(text="üé¨ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®", url=new_url),
            InlineKeyboardButton(text="üîó ‡¶∂‡ßá‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®", switch_inline_query=new_url),
            InlineKeyboardButton(text="‚ôªÔ∏è ‡¶∞‡¶ø‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü", callback_data=f"regenerate_{file_id}")
        ])
    
    buttons.append([InlineKeyboardButton(text="‚ùå ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü", callback_data="delete_message")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# -------------- /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ --------------
@dp.message(Command("start"))
async def welcome_message(message: Message):
    first_name = message.from_user.first_name or "‡¶¨‡¶®‡ßç‡¶ß‡ßÅ"
    welcome_text = (
        f"‚ú® ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ, {first_name}! üåü\n"
        "üîó ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ø‡¶¶‡¶ø **TERA BOX** ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶®, ‡¶Ü‡¶Æ‡¶ø ‡¶∏‡ßá‡¶ü‡¶ø ‡¶™‡ßç‡¶≤‡ßá ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶¨! üé•‚ú®\n"
        "‚ö° ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶ï‡¶æ‡¶ú ‡¶®‡¶æ ‡¶ï‡¶∞‡¶≤‡ßá? ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ! \"‚ôªÔ∏è ‡¶∞‡¶ø‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü\" ‡¶ö‡¶æ‡¶™ ‡¶¶‡¶ø‡¶® ‡¶è‡¶¨‡¶Ç ‡¶®‡¶§‡ßÅ‡¶® ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡ßá‡ßü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡¶®‡•§\n\n"
        "üîó Send a **TERA BOX** link, and I‚Äôll play it for you! üé•‚ú®\n"
        "‚ö° Link not working? Don‚Äôt worry! Just click \"‚ôªÔ∏è Regenerate\" to get a new link."
    )
    await message.reply(welcome_text)

# -------------- ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞: TERA BOX ‡¶≤‡¶ø‡¶Ç‡¶ï modify ‡¶ï‡¶∞‡¶æ --------------
@dp.message()
async def modify_link(message: Message):
    text = message.text or message.caption
    if not text:
        return

    urls = re.findall(r"https?://[^\s]+", text)  # ‡¶∏‡¶¨ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
    unique_links = {}  # ‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶∞‡ßã‡¶ß ‡¶ï‡¶∞‡¶§‡ßá
    m3u8_links = []  # .m3u8 ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π

    for url in urls:
        if "tera" in url:  # ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ TERA BOX ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶¨‡ßá
            file_id = extract_id_from_terabox_link(url)
            if file_id:
                unique_links[file_id] = generate_new_link_from_id(file_id)
                m3u8_link = generate_m3u8_link_from_id(file_id)  # ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ .m3u8 ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶§‡ßà‡¶∞‡¶ø
                m3u8_links.append(m3u8_link)

    if not unique_links:
        return  # ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã TERA BOX ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ï‡¶∞‡¶¨‡ßá ‡¶®‡¶æ

    # ‡¶ü‡¶æ‡¶á‡¶™‡¶ø‡¶Ç ‡¶á‡¶´‡ßá‡¶ï‡ßç‡¶ü ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
    await bot.send_chat_action(message.chat.id, action="typing")
    await asyncio.sleep(1.5)

    # ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
    keyboard = create_keyboard(unique_links)  # ‡¶¨‡¶æ‡¶ü‡¶® ‡¶§‡ßà‡¶∞‡¶ø
    sent_message = await message.reply("üîó ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!", reply_markup=keyboard)

    # .m3u8 ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
    if m3u8_links:
        await message.reply("üé¨ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ M3U8 ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶∞‡ßü‡ßá‡¶õ‡ßá:\n" + "\n".join(m3u8_links))

# -------------- ‡¶∞‡¶ø‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶¨‡¶æ‡¶ü‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ --------------
@dp.callback_query(lambda c: c.data.startswith("regenerate_"))
async def regenerate_link(callback: CallbackQuery):
    file_id = callback.data.replace("regenerate_", "")
    new_id = file_id[1:]  # ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡ßü‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ü‡¶á‡¶°‡¶ø ‡¶§‡ßà‡¶∞‡¶ø
    new_url = generate_new_link_from_id(new_id)

    # ‡¶™‡ßÅ‡¶∞‡ßã‡¶®‡ßã ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
    links = {}
    for button in callback.message.reply_markup.inline_keyboard:
        if len(button) == 3:  # ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®, ‡¶∂‡ßá‡ßü‡¶æ‡¶∞, ‡¶∞‡¶ø‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü
            old_url = button[0].url
            old_file_id = extract_id_from_terabox_link(old_url)
            if old_file_id:
                links[old_file_id] = old_url

    # ‡¶®‡¶§‡ßÅ‡¶® ‡¶∞‡¶ø‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
    links[new_id] = new_url

    keyboard = create_keyboard(links)  # ‡¶Ü‡¶™‡¶°‡ßá‡¶ü‡ßá‡¶° ‡¶¨‡¶æ‡¶ü‡¶® ‡¶§‡ßà‡¶∞‡¶ø

    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer("‚úÖ ‡¶®‡¶§‡ßÅ‡¶® ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡ßü‡ßá‡¶õ‡ßá!")

# -------------- Delete Button Handler --------------
@dp.callback_query(lambda c: c.data == "delete_message")
async def delete_message(callback: CallbackQuery):
    try:
        await bot.delete_message(callback.message.chat.id, callback.message.message_id)
        await callback.answer("‚úÖ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!", show_alert=True)
    except Exception as e:
        logger.error(f"Error deleting message: {e}")
        await callback.answer("‚ùå ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•!", show_alert=True)

# -------------- Keep-Alive ‡¶ì‡ßü‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ (aiohttp) --------------
async def handle(request):
    return web.Response(text="I'm alive!")

async def start_webserver():
    app = web.Application()
    app.router.add_get('/', handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()
    logger.info("‚úÖ Webserver is running on port 8080")

# -------------- Main ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®: ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶ì ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶™‡ßã‡¶≤‡¶ø‡¶Ç ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ --------------
async def main():
    asyncio.create_task(start_webserver())
    logger.info("‚úÖ Bot is starting polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
