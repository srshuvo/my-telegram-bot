import asyncio
import logging
import re
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import Message, CallbackQuery

TOKEN = os.getenv("BOT_TOKEN")  # Environment Variable ржерзЗржХрзЗ ржЯрзЛржХрзЗржи ржирзЗржУрзЯрж╛ рж╣ржЪрзНржЫрзЗ

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

def extract_id_from_url(url):
    """ ЁЯФН рж▓рж┐ржВржХрзЗ 'tera' ржерж╛ржХрж▓рзЗ, ID ржмрзЗрж░ ржХрж░ржмрзЗ """
    if "tera" in url:
        match = re.search(r"/s/([a-zA-Z0-9]+)", url)
        return match.group(1) if match else None
    return None

def modify_id(original_id):
    """ ЁЯФД Regenerate: ID-ржПрж░ ржкрзНрж░ржержо рззржЯрж┐ ржЕржХрзНрж╖рж░ ржмрж╛ржж ржжрж┐рзЯрзЗ ржирждрзБржи ржЖржЗржбрж┐ рждрзИрж░рж┐ ржХрж░ржмрзЗ """
    return original_id[1:] if original_id and len(original_id) > 1 else None

async def send_modified_link(message: Message, file_id):
    """ тЬЕ ржирждрзБржи рж▓рж┐ржВржХ рждрзИрж░рж┐ ржХрж░рзЗ ржЗржирж▓рж╛ржЗржи ржмрзЛрждрж╛ржо рж╕рж╣ ржкрж╛ржарж╛ржмрзЗ """
    new_url = f"https://mdiskplay.com/terabox/{file_id}"

    keyboard = InlineKeyboardMarkup(row_width=1)
    buttons = [
        InlineKeyboardButton(text="ЁЯОм Watch Video", url=new_url),
        InlineKeyboardButton(text="ЁЯФЧ Share", switch_inline_query=new_url),
        InlineKeyboardButton(text="ЁЯФД Regenerate", callback_data=f"regenerate_{file_id}"),
        InlineKeyboardButton(text="ЁЯЧСя╕П Delete", callback_data="delete_message")
    ]
    keyboard.add(*buttons)

    await message.reply("тЬЕ ржЖржкржирж╛рж░ рж▓рж┐ржВржХ ржкрзНрж░рж╕рзНрждрзБржд!", reply_markup=keyboard)

@dp.message_handler(F.text)
async def modify_link(message: Message):
    """ тЬЕ ржЗржЙржЬрж╛рж░рзЗрж░ ржкрж╛ржарж╛ржирзЛ рж▓рж┐ржВржХ ржерзЗржХрзЗ ID ржмрзЗрж░ ржХрж░рзЗ ржирждрзБржи рж▓рж┐ржВржХ рждрзИрж░рж┐ ржХрж░ржмрзЗ """
    text = message.text
    if not text:
        return

    urls = text.split()
    for url in urls:
        file_id = extract_id_from_url(url)
        if file_id:
            await send_modified_link(message, file_id)
            return

    await message.reply("тЪая╕П ржХрзЛржирзЛ ржмрзИржз рж▓рж┐ржВржХ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐!")

@dp.callback_query_handler(F.data.startswith("regenerate_"))
async def regenerate_link(callback: CallbackQuery):
    """ ЁЯФД Regenerate ржмрж╛ржЯржи: ржирждрзБржи ржЖржЗржбрж┐ рждрзИрж░рж┐ ржХрж░ржмрзЗ """
    old_id = callback.data.split("_")[1]
    new_id = modify_id(old_id)

    if not new_id:
        await callback.answer("тЪая╕П Regenerate рж╕ржорзНржнржм ржирж╛!", show_alert=True)
        return

    await callback.message.delete()
    await send_modified_link(callback.message, new_id)
    await callback.answer("тЬЕ рж▓рж┐ржВржХ ржирждрзБржиржнрж╛ржмрзЗ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ!")

@dp.callback_query_handler(F.data == "delete_message")
async def delete_message(callback: CallbackQuery):
    """ ЁЯЧСя╕П Delete ржмрзЛрждрж╛ржо ржХрзНрж▓рж┐ржХ ржХрж░рж▓рзЗ ржорзЗрж╕рзЗржЬ ржбрж┐рж▓рж┐ржЯ ржХрж░ржмрзЗ """
    await callback.message.delete()
    await callback.answer("тЬЕ ржорзЗрж╕рзЗржЬ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣рзЯрзЗржЫрзЗ!", show_alert=True)

async def main():
    """ ЁЯЪА ржмржЯ ржЪрж╛рж▓рж╛ржирзЛрж░ ржлрж╛ржВрж╢ржи """
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())
