import re
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import os

# -------------- Logging рж╕рзЗржЯржЖржк --------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# -------------- Environment Variable ржерзЗржХрзЗ BOT_TOKEN ржирзЗржУрзЯрж╛ --------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is not set!")

# -------------- Bot ржПржмржВ Dispatcher Initialization --------------
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# -------------- TERA BOX рж▓рж┐ржЩрзНржХ ржерзЗржХрзЗ ржЖржЗржбрж┐ ржПржХрзНрж╕ржЯрзНрж░рж╛ржХрзНржЯ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи --------------
def extract_id_from_terabox_link(link: str) -> str:
    """
    TERA BOX рж▓рж┐ржЩрзНржХ ржерзЗржХрзЗ ID ржмрзЗрж░ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржиред
    ржЙржжрж╛рж╣рж░ржг: https://www.terabox.com/s/123_abcXYZ -> 123_abcXYZ
    """
    match = re.search(r"terabox.com/s/([a-zA-Z0-9_]+)", link)
    if match:
        return match.group(1)
    return None

# -------------- ржЖржЗржбрж┐ ржерзЗржХрзЗ ржирждрзБржи рж▓рж┐ржЩрзНржХ рждрзИрж░рж┐ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи --------------
def generate_new_link_from_id(terabox_id: str) -> str:
    """
    ржЖржЗржбрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржирждрзБржи рж▓рж┐ржЩрзНржХ рждрзИрж░рж┐ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржиред
    ржЙржжрж╛рж╣рж░ржг: 123_abcXYZ -> https://mdiskplay.com/terabox/123_abcXYZ
    """
    return f"https://mdiskplay.com/terabox/{terabox_id}"

# -------------- ржЖржЗржбрж┐ рж░рж┐ржЬрзЗржирж╛рж░рзЗржЯ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи --------------
def regenerate_id(terabox_id: str) -> str:
    """
    ржЖржЗржбрж┐ ржерзЗржХрзЗ ржкрзНрж░ржержо ржЕржХрзНрж╖рж░ ржмрж╛ рж╕ржВржЦрзНржпрж╛ ржмрж╛ржж ржжрж┐рзЯрзЗ ржирждрзБржи ржЖржЗржбрж┐ рждрзИрж░рж┐ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржиред
    ржЙржжрж╛рж╣рж░ржг: 123_abcXYZ -> 23_abcXYZ
    """
    return terabox_id[1:]

# -------------- TERA рж╢ржмрзНржжржЯрж┐ ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рзЗ рж▓рж┐ржЩрзНржХ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи --------------
def modify_terabox_links(text: str) -> str:
    """
    ржкрж╛ржарж╛ржирзЛ ржЯрзЗржХрзНрж╕ржЯрзЗрж░ ржоржзрзНржпрзЗ ржпрзЗрж╕ржм TERA BOX рж▓рж┐ржЩрзНржХ ржЖржЫрзЗ, рж╕рзЗржЧрзБрж▓рзЛрж░ ржЖржЗржбрж┐ ржмрзЗрж░ ржХрж░рзЗ ржирждрзБржи рж▓рж┐ржЩрзНржХ рждрзИрж░рж┐ ржХрж░ржмрзЗред
    TERA рж╢ржмрзНржжржЯрж┐ рж▓рж┐ржЩрзНржХрзЗ ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рзЗ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░ржмрзЗред
    """
    # рж╕ржм TERA рж╢ржмрзНржжржпрзБржХрзНржд рж▓рж┐ржЩрзНржХ ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рж╛
    urls = re.findall(r"https?://[^\s]+tera[^\s]*", text)
    
    # ржкрзНрж░рждрж┐ржЯрж┐ рж▓рж┐ржЩрзНржХрзЗрж░ ржЬржирзНржп ржЖржЗржбрж┐ ржмрзЗрж░ ржХрж░рж╛ ржПржмржВ ржирждрзБржи рж▓рж┐ржЩрзНржХ рждрзИрж░рж┐ ржХрж░рж╛
    for url in urls:
        terabox_id = extract_id_from_terabox_link(url)
        if terabox_id:
            new_link = generate_new_link_from_id(terabox_id)
            # ржкрзБрж░рж╛ржирзЛ рж▓рж┐ржЩрзНржХржЯрж┐ ржирждрзБржи рж▓рж┐ржЩрзНржХ ржжрж┐рзЯрзЗ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛
            text = text.replace(url, new_link)
    
    return text

# -------------- /start ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ --------------
@dp.message(commands=["start"])
async def welcome_message(message: Message):
    first_name = message.from_user.first_name or "ржмржирзНржзрзБ"
    welcome_text = (
        f"тЬи рж╕рзНржмрж╛ржЧрждржо, {first_name}! ЁЯМЯ\n"
        "ржЖржорж╛ржжрзЗрж░ рж╕рзЗржмрж╛рзЯ ржЖржкржирж╛рж░ ржЖржЧржоржиржХрзЗ рж╕рзНржмрж╛ржЧржд ржЬрж╛ржирж╛ржЗ! ЁЯТл\n\n"
        "ЁЯФЧ ржпржжрж┐ ржЖржкржирж┐ **TERA BOX** рж▓рж┐ржЩрзНржХ ржкрж╛ржарж╛ржи, ржЖржорж░рж╛ рж╕рзЗржЯрж┐ ржирж┐рж░рж╛ржкржжржнрж╛ржмрзЗ **PLAY** ржХрж░рзЗ ржжрж┐ржмред ЁЯОетЬи\n\n"
        "ЁЯдФ ржпрзЗржХрзЛржирзЛ ржкрзНрж░рж╢рзНржи ржмрж╛ рж╕рж╣рж╛рзЯрждрж╛рж░ ржЬржирзНржп ржЖржорж╛ржжрзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред\n\n"
        f"тЬи Welcome, {first_name}! ЁЯМЯ\n"
        "We're thrilled to have you here! ЁЯТл\n\n"
        "ЁЯФЧ If you send a **TERA BOX** link, we'll safely **PLAY** it for you. ЁЯОетЬи\n\n"
        "ЁЯдФ If you have any questions or need assistance, feel free to ask! ЁЯШК"
    )
    try:
        await message.reply(welcome_text)
    except Exception as e:
        logger.error(f"Error sending welcome message: {e}")

# -------------- ржорзЗрж╕рзЗржЬ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: TERA BOX рж▓рж┐ржЩрзНржХ modify ржХрж░рж╛ --------------
@dp.message()
async def modify_link(message: Message):
    text = message.text or message.caption
    if not text:
        return

    # TERA BOX рж▓рж┐ржЩрзНржХржЧрзБрж▓рж┐ modify ржХрж░рж╛
    modified_text = modify_terabox_links(text)

    # ржЯрж╛ржЗржкрж┐ржВ ржЗржлрзЗржХрзНржЯ ржжрзЗржЦрж╛ржирзЛрж░ ржЬржирзНржп
    await bot.send_chat_action(message.chat.id, action="typing")

    # ржЗржирж▓рж╛ржЗржи ржмрж╛ржЯржи рж╕рж╣ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛ
    buttons = [
        [
            InlineKeyboardButton(
                text="ЁЯОм Watch Video",  # ржХрж╛рж╕рзНржЯржо ржмрж╛ржЯржи ржЯрзЗржХрзНрж╕ржЯ
                url="https://www.example.com",  # ржПржЦрж╛ржирзЗ ржЖржкржирж╛рж░ ржнрж┐ржбрж┐ржУ рж▓рж┐ржЩрзНржХ ржжрж┐ржи
            ),
            InlineKeyboardButton(
                text="ЁЯФЧ Share this Link Now!",  # рж╢рзЗрзЯрж╛рж░ рж▓рж┐ржЩрзНржХ ржмрж╛ржЯржи ржЯрзЗржХрзНрж╕ржЯ
                switch_inline_query=modified_text,
            ),
            InlineKeyboardButton(
                text="тЩ╗я╕П Regenerate",  # рж░рж┐ржЬрзЗржирж╛рж░рзЗржЯ ржмрж╛ржЯржи
                callback_data=f"regenerate_{text}",  # рж░рж┐ржЬрзЗржирж╛рж░рзЗржЯрзЗрж░ ржЬржирзНржп CallbackData
            ),
        ]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.reply(modified_text, reply_markup=keyboard)

# -------------- Regenerate Button Handler --------------
@dp.callback_query()
async def regenerate(callback: CallbackQuery):
    try:
        # callback_data ржерзЗржХрзЗ ржЖржЗржбрж┐ ржкрж╛ржУрзЯрж╛
        action, original_id = callback.data.split("_", 1)
        
        if action == "regenerate":
            # ржирждрзБржи ржЖржЗржбрж┐ рждрзИрж░рж┐ ржХрж░рж╛
            new_id = regenerate_id(original_id)
            new_link = generate_new_link_from_id(new_id)

            # ржирждрзБржи рж▓рж┐ржЩрзНржХ ржПржмржВ ржЖржЗржбрж┐ рж╕рж╣ ржорзЗрж╕рзЗржЬ ржЖржкржбрзЗржЯ ржХрж░рж╛
            await callback.message.edit_text(
                f"ЁЯОм New Video Link: {new_link}\n\n"
                "ЁЯФЧ Share this link or click below to regenerate another one.",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("тЩ╗я╕П Regenerate Again", callback_data=f"regenerate_{new_id}")
                )
            )

            await callback.answer("тЬЕ New link generated successfully!", show_alert=True)
    except Exception as e:
        logger.error(f"Error in regenerate callback: {e}")
        await callback.answer("тЭМ Failed to regenerate link.", show_alert=True)

# -------------- Main ржлрж╛ржВрж╢ржи: ржмржЯрзЗрж░ ржкрзЛрж▓рж┐ржВ рж╢рзБрж░рзБ ржХрж░рж╛ --------------
async def main():
    logger.info("тЬЕ Bot is starting polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
