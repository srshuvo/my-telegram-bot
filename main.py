import os
import re
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiohttp import web

# -------------- Logging рж╕рзЗржЯржЖржк --------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# -------------- Environment Variable ржерзЗржХрзЗ BOT_TOKEN ржирзЗржУрзЯрж╛ --------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is not set!")

# -------------- Bot ржПржмржВ Dispatcher Initialization --------------
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# -------------- TERA BOX рж▓рж┐ржЩрзНржХ ржерзЗржХрзЗ ржЖржЗржбрж┐ ржПржХрзНрж╕ржЯрзНрж░рж╛ржХрж╢ржи --------------
def extract_id_from_terabox_link(text: str) -> str:
    match = re.search(r"terabox.com/s/([a-zA-Z0-9_]+)", text)
    if match:
        return match.group(1)
    return None

# -------------- ржирждрзБржи рж▓рж┐ржЩрзНржХ рждрзИрж░рж┐ --------------
def generate_new_link_from_id(id: str) -> str:
    return f"https://mdiskplay.com/terabox/{id}"

# -------------- /start ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ --------------
@dp.message(commands=["start"])
async def welcome_message(message: Message):
    first_name = message.from_user.first_name or "ржмржирзНржзрзБ"
    welcome_text = (
        f"тЬи рж╕рзНржмрж╛ржЧрждржо, {first_name}! ЁЯМЯ\n"
        "ржЖржорж╛ржжрзЗрж░ рж╕рзЗржмрж╛рзЯ ржЖржкржирж╛рж░ ржЖржЧржоржиржХрзЗ рж╕рзНржмрж╛ржЧржд ржЬрж╛ржирж╛ржЗ! ЁЯТл\n\n"
        "ЁЯФЧ ржпржжрж┐ ржЖржкржирж┐ **TERA BOX** рж▓рж┐ржЩрзНржХ ржкрж╛ржарж╛ржи, ржЖржорж░рж╛ рж╕рзЗржЯрж┐ ржирж┐рж░рж╛ржкржжржнрж╛ржмрзЗ **PLAY** ржХрж░рзЗ ржжрж┐ржмред ЁЯОетЬи\n\n"
        "ЁЯдФ ржпрзЗржХрзЛржирзЛ ржкрзНрж░рж╢рзНржи ржмрж╛ рж╕рж╣рж╛рзЯрждрж╛рж░ ржЬржирзНржп ржЖржорж╛ржжрзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред\n\n"
        f"тЬи Welcome, {first_name}! ЁЯМЯ\n"
        "We're thrilled to have you here! ЁЯТл\n\n"
        "ЁЯФЧ If you send a **TERA BOX** link, we'll safely **PLAY** it for you. ЁЯОетЬи\n\n"
        "ЁЯдФ If you have any questions or need assistance, feel free to ask! ЁЯШК"
    )
    try:
        await message.reply(welcome_text)
    except Exception as e:
        logger.error(f"Error sending welcome message: {e}")

# -------------- TERA BOX рж▓рж┐ржЩрзНржХ modify ржХрж░рж╛ --------------
@dp.message()
async def modify_link(message: Message):
    text = message.text or message.caption
    if not text:
        return

    # TERA BOX рж▓рж┐ржЩрзНржХ ржерзЗржХрзЗ ржЖржЗржбрж┐ ржмрзЗрж░ ржХрж░рж╛
    extracted_id = extract_id_from_terabox_link(text)
    if not extracted_id:
        return

    # ржирждрзБржи рж▓рж┐ржЩрзНржХ рждрзИрж░рж┐ ржХрж░рж╛
    new_link = generate_new_link_from_id(extracted_id)

    # ржЗржирж▓рж╛ржЗржи ржмрж╛ржЯржи рж╕рж╣ ржорзЗрж╕рзЗржЬ рждрзИрж░рж┐ ржХрж░рж╛
    buttons = [
        [InlineKeyboardButton(text="ЁЯОм Watch Video", url=new_link)],
        [InlineKeyboardButton(text="ЁЯФЧ Share this Link Now!", switch_inline_query=new_link)],
        [InlineKeyboardButton(text="тЩ╗я╕П Regenerate", callback_data=f"regenerate_{extracted_id}")],
        [InlineKeyboardButton(text="тЭМ Delete", callback_data="delete_message")]
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    # ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛ
    await message.reply(text=f"Here is your TERA BOX link: {new_link}", reply_markup=keyboard)

# -------------- Regenerate Button Handler --------------
@dp.callback_query(lambda c: c.data and c.data.startswith("regenerate_"))
async def regenerate_link(callback: CallbackQuery):
    extracted_id = callback.data.split("_")[1]
    new_id = extracted_id[1:]  # ржкрзНрж░ржержо ржЕржХрзНрж╖рж░/рж╕ржВржЦрзНржпрж╛ ржмрж╛ржж ржжрзЗрзЯрж╛
    new_link = generate_new_link_from_id(new_id)
    
    await callback.message.edit_text(f"Here is your regenerated link: {new_link}")
    await callback.answer(f"тЬЕ New ID generated: {new_id}", show_alert=True)

# -------------- Delete Button Handler --------------
@dp.callback_query(F.data == "delete_message")
async def delete_message(callback: CallbackQuery):
    try:
        await bot.delete_message(callback.message.chat.id, callback.message.message_id)
        await callback.answer("тЬЕ Message deleted successfully!", show_alert=True)
    except Exception as e:
        logger.error(f"Error deleting message: {e}")
        await callback.answer("тЭМ Failed to delete message!", show_alert=True)

# -------------- Keep-Alive ржУрзЯрзЗржм рж╕рж╛рж░рзНржнрж╛рж░ (aiohttp) --------------
async def handle(request):
    return web.Response(text="I'm alive!")

async def start_webserver():
    app = web.Application()
    app.router.add_get('/', handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()
    logger.info("тЬЕ Webserver is running on port 8080")

# -------------- Main ржлрж╛ржВрж╢ржи: ржУржпрж╝рзЗржм рж╕рж╛рж░рзНржнрж╛рж░ ржУ ржмржЯрзЗрж░ ржкрзЛрж▓рж┐ржВ рж╢рзБрж░рзБ ржХрж░рж╛ --------------
async def main():
    asyncio.create_task(start_webserver())
    logger.info("тЬЕ Bot is starting polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
